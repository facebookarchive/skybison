name: CMake

on:
  push:
    branches: [ trunk ]
  pull_request:
    branches: [ trunk ]

jobs:
  build-prev:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - run: git checkout HEAD^
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_TOOLCHAIN_FILE=util/linux.cmake
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: make -j4
    - name: Copy benchmarks into build dir
      working-directory: ${{github.workspace}}
      run: cp -r benchmarks build
    - uses: actions/upload-artifact@v3
      with:
        name: prev-build
        path: ${{github.workspace}}/build

  build:
    needs: build-prev
    strategy:
      matrix:
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: [DebugOpt, RelWithDebInfo]
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/upload-artifact@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=util/linux.cmake

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: |
        make -j4
        make cpython
        make -j4 cpython-tests

    - name: Run C++ tests with Skybison
      working-directory: ${{github.workspace}}/build
      run: ${{github.workspace}}/third-party/gtest-parallel/gtest-parallel ./bin/python-tests

    - name: Run C++ tests with Skybison (C++ interpreter)
      working-directory: ${{github.workspace}}/build
      run: PYRO_CPP_INTERPRETER=1 ${{github.workspace}}/third-party/gtest-parallel/gtest-parallel ./bin/python-tests

    - name: Run C++ tests with CPython
      working-directory: ${{github.workspace}}/build
      run: ${{github.workspace}}/third-party/gtest-parallel/gtest-parallel ./bin/cpython-tests

    - name: Run Python tests with Skybison
      working-directory: ${{github.workspace}}
      run: PYRO_BUILD_DIR="build" ./util/python_tests_pyro.sh

    - name: Run Python tests with Skybison (C++ interpreter)
      working-directory: ${{github.workspace}}
      run: PYRO_CPP_INTERPRETER=1 PYRO_BUILD_DIR="build" ./util/python_tests_pyro.sh

    - name: Run Python tests with CPython
      working-directory: ${{github.workspace}}
      run: PYRO_BUILD_DIR="build" ./util/python_tests_cpython.sh

    - name: Copy benchmarks into build dir
      working-directory: ${{github.workspace}}
      run: cp -r benchmarks build

    - uses: actions/upload-artifact@v3
      if: ${{ github.event_name == 'pull_request' && matrix.BUILD_TYPE == 'RelWithDebInfo' }}
      with:
        name: curr-build
        path: ${{github.workspace}}/build

  benchmark:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build, build-prev]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - uses: actions/download-artifact@v3
      with:
        name: prev-build

    - uses: actions/download-artifact@v3
      with:
        name: curr-build

    - name: Run benchmarks
      working-directory: ${{github.workspace}}
      run: |
        ./benchmarks/run.py --tool callgrind --json \
          --interpreter prev-build/bin/python --interpreter-name python_base --path benchmarks/benchmarks \
          --interpreter curr-build/bin/python --interpreter-name python_new --path benchmarks/benchmarks \
          --interpreter $(which python3.8) --interpreter-name fbcode-cpython --path curr-build/benchmarks/benchmarks \
          > benchmark-results.json

    - name: Format benchmark results
      working-directory: ${{github.workspace}}
      run: |
        ./benchmarks/format_results.py benchmark-results.json > benchmark-results.md

    - name: Comment on Pull Request
      uses: actions/github-script@v5
      with:
        script: |
          const { promises: fs } = require('fs');
          const benchmark_results = await fs.readFile('${{github.workspace}}/benchmark-results.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: benchmark_results,
          })

  lint:
    runs-on: ubuntu-latest
    # TODO(max): Install and run Black on Python code
    steps:
    - name: Install clang-format
      run: sudo apt install -y clang-format
    - uses: actions/checkout@v3
    - name: Run clang-format
      working-directory: ${{github.workspace}}
      run: |
        find capi ext runtime -type f \( -name '*.c' -o -name '*.h' -o -name '*.cpp' \) \
          ! -wholename 'runtime/unicode-db.cpp' \
          -exec clang-format --dry-run --Werror '{}' ';'
